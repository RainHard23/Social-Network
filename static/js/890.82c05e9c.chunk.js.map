{"version":3,"file":"static/js/890.82c05e9c.chunk.js","mappings":"wKACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA4I,0BAA5I,EAAgL,yB,mBCQnKA,EAAa,SAACC,GACvB,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,SAAsCJ,EAAMK,UCJ3CC,EAAU,SAACN,GACpB,OACI,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMO,W,uCCHpCC,GAAcC,EAAAA,EAAAA,GAAiB,IAsBrC,GAAeC,EAAAA,EAAAA,GAA0B,CAACC,KAAM,wBAAhD,EAhBqE,SAACX,GAClE,OACI,kBAAMY,SAAUZ,EAAMa,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAaX,KAAK,iBACpCY,SAAU,CAACC,EAAAA,EAAUV,GACdW,YAAY,gBAGvB,0BACI,6C,oDCdZC,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,S,wBCyBvB,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAxBkB,SAACJ,GACnB,MAAO,CACHK,YAAaL,EAAMK,gBAIF,SAACC,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASC,EAAAA,EAAAA,GAAYC,UDR1B,SAA6BC,GAiBhC,OAFoCL,EAAAA,EAAAA,IAAQL,EAARK,EAbV,SAACzB,GAEvB,IAAKsB,EAAwBtB,EAAxBsB,OAAWS,GAAhB,OAA6B/B,EAA7B,GAEI,OAAKsB,GAIE,SAACQ,GAAD,UAAeC,KAHX,SAAC,KAAD,CAAU5B,GAAG,gBCepC,ECjBuB,SAACH,GACpB,IAAIqB,EAAQrB,EAAM0B,YAEdM,EAAkBX,EAAMY,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAACpC,EAAD,CAAYM,KAAM8B,EAAE9B,KAAMD,GAAI+B,EAAE/B,QACzEgC,EAAmBf,EAAMgB,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAChC,EAAD,CAASC,QAAS+B,EAAE/B,aAQnE,OACI,iBAAKN,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK8B,KAEL,iBAAK/B,UAAWC,EAAhB,WACI,yBAAMkC,KACN,0BACI,SAAC,EAAD,CAAgBxB,SAbV,SAAC2B,GACnBvC,EAAM4B,YAAYW,EAAOV","sources":["webpack://samurai-way/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/DialogItem/DialogsItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/AddMessageForm/AddMessageForm.tsx","hoc/WithAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__4CKXe\",\"dialogsItems\":\"Dialogs_dialogsItems__CRNZM\",\"dialog\":\"Dialogs_dialog__QmcXY\",\"messages\":\"Dialogs_messages__jUgJJ\",\"message\":\"Dialogs_message__hGKXz\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type MessageProps = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessageProps) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/Validators\";\r\nimport {FormControl} from \"../../../Components/common/FormsControls/FormsControls\";\r\n\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport type AddMessageType = {\r\n    newMessageBody: string\r\n}\r\n\r\n const AddMessageForm: React.FC<InjectedFormProps<AddMessageType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={FormControl} name='newMessageBody'\r\n                validate={[required, maxLength50]}\r\n                       elementType='textarea'\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddMessageType>({form: 'dialogAddMessageForm'}) (AddMessageForm)","import React, {ComponentType} from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n};\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: PropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n         {\r\n            if (!isAuth) {\r\n                return <Redirect to=\"/login\" />;\r\n            }\r\n\r\n            return <Component {...restProps as T} />;\r\n        }\r\n    }\r\n\r\n\r\n   let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    addMessageBody, DialogPageType,\r\n\r\n} from \"../../redux/store\";\r\nimport {AppStateType, DispatchType} from \"../../redux/redux-store\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {sendMessage} from \"../../redux/dialogs-reducer\";\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: DispatchType): MapDispatchType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessage(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\ntype MapStateType = {\r\n    dialogsPage: DialogPageType\r\n}\r\ntype MapDispatchType = {\r\n    sendMessage: (newMessageBody: string)=> void\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n","import React, {ChangeEvent, ChangeEventHandler} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogsItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {\r\n    DialogPageType,\r\n} from \"../../redux/store\";\r\nimport AddMessageForm, {AddMessageType} from \"../../Components/Dialogs/AddMessageForm/AddMessageForm\";\r\n\r\n\r\n\r\ntype ProfilePagePropsType = {\r\n    dialogsPage: DialogPageType\r\n    addMessageBody: (body: string) => void\r\n    sendMessage: (values: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Dialogs = (props: ProfilePagePropsType) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message}/>)\r\n\r\n\r\n    const addNewMessage = (values: AddMessageType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <AddMessageForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n"],"names":["DialogItem","props","className","s","to","id","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","FormControl","validate","required","elementType","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dialogsPage","dispatch","sendMessage","newMessageBody","Component","restProps","dialogsElements","dialogs","map","d","messagesElements","messages","m","values"],"sourceRoot":""}