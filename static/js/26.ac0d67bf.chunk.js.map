{"version":3,"file":"static/js/26.ac0d67bf.chunk.js","mappings":"0NACA,EAA0B,yB,aCGX,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,IAAIG,EAAY,MAAPJ,EAAc,KAAyB,qBAAXK,QAA0BL,EAAIK,OAAOC,WAAaN,EAAI,cAE3F,GAAU,MAANI,EAAJ,CACA,IAIIG,EAAIC,EAJJC,EAAO,GACPC,GAAK,EACLC,GAAK,EAIT,IACE,IAAKP,EAAKA,EAAGQ,KAAKZ,KAAQU,GAAMH,EAAKH,EAAGS,QAAQC,QAC9CL,EAAKM,KAAKR,EAAGS,QAETf,GAAKQ,EAAKQ,SAAWhB,GAH4BS,GAAK,IAK5D,MAAOQ,GACPP,GAAK,EACLH,EAAKU,EACL,QACA,IACOR,GAAsB,MAAhBN,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIO,EAAI,MAAMH,GAIlB,OAAOC,GFtBuB,CAAqBT,EAAKC,KAAM,EAAAkB,EAAA,GAA2BnB,EAAKC,IGLjF,WACb,MAAM,IAAImB,UAAU,6IHIgF,GIJtG,OAAgB,YAAc,iCAAiC,WAAa,gCAAgC,iBAAmB,sCAAsC,iBAAmB,sCAAsC,UAAY,+BAA+B,QAAU,8B,6BCsDnR,EA3C+B,SAACC,GAC5B,SAA8BC,EAAAA,EAAAA,WAAS,GAAvC,GAAKC,EAAL,KAAeC,EAAf,KACA,KAA0BF,EAAAA,EAAAA,UAASD,EAAMI,QAAzC,GAAKA,EAAL,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAaV,OACI,4BACMF,IACE,4BACI,qCAAe,iBACfK,cAjBK,WACjBJ,GAAY,IAee,SAEjBH,EAAMI,YAGXF,IACG,0BACI,kBACIM,SApBG,SAACC,GACpBJ,EAAUI,EAAEC,cAAcf,QAoBVgB,WAAW,EACXhB,MAAOS,EACPQ,OAnBO,WACvBT,GAAY,GACZH,EAAMa,aAAaT,Y,iDCgE3B,GADiCU,EAAAA,EAAAA,GAAmD,CAAEC,KAAM,gBAA3DD,EAtEuB,SAAC,GAAsC,IAApCE,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAE9E,OACI,kBAAMC,SAAUH,EAAhB,UACKE,IAAS,gBAAKE,UAAWC,EAAAA,EAAAA,iBAAhB,SAAyCH,KACnD,0BACI,wCAEJ,4BACI,qCADJ,MAEI,SAACI,EAAA,EAAD,CACIC,YAAa,YACbC,KAAM,WACNC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,GACXC,YAAY,cAIpB,4BACI,6CADJ,KAEI,SAACP,EAAA,EAAD,CACIE,KAAM,iBACNC,UAAWC,EAAAA,EACXC,SAAU,GACVG,KAAM,iBAId,4BACI,kDADJ,KAEI,SAACR,EAAA,EAAD,CACIC,YAAa,yBACbC,KAAM,4BACNC,UAAWC,EAAAA,EACXC,SAAU,GACVE,YAAY,iBAIpB,4BACI,oCADJ,KAEI,SAACP,EAAA,EAAD,CACIC,YAAa,WACbC,KAAM,UACNC,UAAWC,EAAAA,EACXC,SAAU,GACVE,YAAY,iBAGpB,4BACI,oCADJ,KACsBZ,EAAQc,UAAYC,OAAOC,KAAKhB,EAAQc,UAAUG,KAAI,SAAAC,GACxE,OAEI,gBAAKf,UAAWgB,EAAAA,QAAhB,UACI,yBAAID,EAAJ,MAAU,SAACb,EAAA,EAAD,CACNC,YAAaY,EACbX,KAAM,YAAcW,EACpBV,UAAWC,EAAAA,EACXC,SAAU,GACVE,YAAY,cANYM,eCU9CE,EAAc,SAACrC,GACjB,OACI,2BACKA,EAAMsC,UAAW,0BACd,mBAAQC,QAASvC,EAAMwC,aAAvB,qBAEJ,4BACI,qCADJ,KACuBxC,EAAMiB,QAAQwB,aAErC,4BACI,6CADJ,KAC+BzC,EAAMiB,QAAQyB,eAAiB,MAAQ,QAErE1C,EAAMiB,QAAQyB,iBACX,4BACI,kDADJ,KACoC1C,EAAMiB,QAAQ0B,8BAGtD,4BACI,oCADJ,KACsB3C,EAAMiB,QAAQ2B,YAEpC,4BACI,oCADJ,KACsBZ,OAAOC,KAAKjC,EAAMiB,QAAQc,UAAUG,KAAI,SAAAC,GAAQ,IAAD,EAEjE,OAAO,SAACU,EAAD,CAAmBC,aAAcX,EAAKY,aAAY,UAAE/C,EAAMiB,eAAR,aAAE,EAAec,SAASI,IAA9DA,aAO/BU,EAAU,SAAC,GAAoF,IAAlFC,EAAiF,EAAjFA,aAAcC,EAAmE,EAAnEA,aAC7B,OAAO,iBAAK3B,UAAWgB,EAAAA,QAAhB,WAA2B,uBAAIU,IAA/B,KAAmDC,MAG9D,EA/EoB,SAAC/C,GAEjB,SAA8BC,EAAAA,EAAAA,WAAS,GAAvC,GAAKC,EAAL,KAAeC,EAAf,KAEA,IAAKH,EAAMiB,QACP,OAAO,SAAC+B,EAAA,EAAD,IAgBX,OACI,iBAAK5B,UAAWgB,EAAAA,YAAhB,WACI,gBAAKhB,UAAWgB,EAAAA,QAAhB,UACI,gBAAKa,IAAI,gGACJC,IAAI,IAAI9B,UAAWgB,EAAAA,gBAE5B,iBAAKhB,UAAWgB,EAAAA,iBAAhB,WACI,gBAAKa,IAAKjD,EAAMiB,QAAQkC,OAAOC,OAASC,EAAWjC,UAAWgB,EAAAA,UAAac,IAAI,KAC9ElD,EAAMsC,UAAW,kBAAOR,KAAK,OAAOtB,SArBrB,SAACC,GACzB,GAAIA,EAAE6C,QAAU7C,EAAE6C,OAAOC,OAAS9C,EAAE6C,OAAOC,MAAM3D,OAAS,EAAG,CACzD,IAAM4D,EAAO/C,EAAE6C,OAAOC,MAAM,GAC5BvD,EAAMyD,UAAUD,OAmBXtD,GAAW,SAAC,EAAD,CAAiBwD,cAAe1D,EAAMiB,QAASA,QAASjB,EAAMiB,QAASE,SAf9E,SAACwC,GACd3D,EAAM4D,YAAYD,GAAUE,MAAK,WAC7B1D,GAAY,UAcJ,SAACkC,EAAD,CAAapB,QAASjB,EAAMiB,QAASqB,QAAStC,EAAMsC,QAASE,aAAc,WAAQrC,GAAY,OAEnG,SAAC,EAAD,CAAwBC,OAAQJ,EAAMI,OAAQS,aAAcb,EAAMa,sBCzElF,EAA8B,6BAA9B,EAAuE,2BAAvE,EAAiH,8BAAjH,EAA+J,+BAA/J,EAA4M,6BAA5M,EAAiP,uBCAjP,EAAuB,mBCgBvB,EAVa,SAACb,GACV,OACgB,iBAAKoB,UAAWgB,EAAhB,WACI,gBAAKa,IAAI,yDAAyDC,IAAI,KACrElD,EAAM8D,SACP,0BAAK,0BAAO9D,EAAM+D,kBCFpCC,GAAcC,EAAAA,EAAAA,GAAiB,IAmBjCC,GAAsBpD,EAAAA,EAAAA,GAA2B,CAAEC,KAAM,yBAAnCD,EAlByC,SAACd,GAChE,OACI,kBAAMmB,SAAUnB,EAAMgB,aAAcI,UAAWgB,EAA/C,WACI,0BACI,SAACd,EAAA,EAAD,CACIE,KAAK,cACLC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,EAAUoC,GACrBnC,YAAY,gBAGpB,0BACI,mBAAQT,UAAWgB,EAAnB,yBAEJ,mBAAQhB,UAAWgB,EAAnB,0BAgCZ,EA1BgB+B,EAAAA,MAAW,SAACnE,GACxB,IAAIoE,EAAgBpE,EAAMqE,MAAMnC,KAAI,SAACoC,EAAGC,GAAJ,OAChC,SAAC,EAAD,CAEIT,QAASQ,EAAER,QACXC,UAAWO,EAAEE,YAFRD,MAQb,OACI,iBAAKnD,UAAWgB,EAAhB,WACI,eAAIhB,UAAWgB,EAAf,uBACA,SAAC8B,EAAD,CAAqB/C,SAPf,SAACsD,GAA6B,IAAD,EACvC,UAAAzE,EAAM0E,iBAAN,cAAA1E,EAAkByE,EAAOE,iBAOrB,gBAAKvD,UAAWgB,EAAhB,SACKgC,U,mBCiBjB,GAFMQ,EAAAA,EAAAA,KA1BkB,SAACC,GACrB,MAAO,CACHR,MAAOQ,EAAMC,YAAYT,MACzBM,YAAaE,EAAMC,YAAYH,gBAIZ,SAACI,GACxB,MAAO,CACHL,UAAW,SAACC,GACRI,GAASL,EAAAA,EAAAA,IAAUC,QAgBzBC,CAA6CI,GCnBnD,EAjBgB,SAAChF,GAEb,OACI,iBAAKoB,UAAWgB,EAAhB,WACI,SAAC,EAAD,CAAaqB,UAAWzD,EAAMyD,UACjBnB,QAAStC,EAAMsC,QACfrB,QAASjB,EAAMiB,QACfb,OAAQJ,EAAMI,OACdS,aAAcb,EAAMa,aACrB+C,YAAa5D,EAAM4D,eAG/B,SAAC,EAAD,Q,oBCFNqB,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAyCD,OAzCCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAEF,WACI,IAAIC,EAASC,KAAKnF,MAAMoF,MAAMC,OAAOH,OAChCA,GAAuC,MAA7BC,KAAKnF,MAAMsF,mBACtBJ,EAASC,KAAKnF,MAAMsF,mBAEhBH,KAAKnF,MAAMuF,QAAQ7F,KAAK,UAIhCyF,KAAKnF,MAAMwF,eAAeN,GAC1BC,KAAKnF,MAAMyF,UAAUP,KACxB,+BACD,WAEIC,KAAKO,mBACR,gCAED,SAAmBC,EAAgCC,EAAyBC,GACpEV,KAAKnF,MAAMoF,MAAMC,OAAOH,QAAUC,KAAKnF,MAAMoF,MAAMC,OAAOH,QAC1DC,KAAKO,mBAGZ,oBAED,WAEI,OACI,0BACI,SAAC,GAAD,kBACQP,KAAKnF,OADb,IAEIsC,SAAU6C,KAAKnF,MAAMoF,MAAMC,OAAOH,OAClCjE,QAASkE,KAAKnF,MAAMiB,QACpBb,OAAQ+E,KAAKnF,MAAMI,OACnBS,aAAcsE,KAAKnF,MAAMa,aACzB4C,UAAW0B,KAAKnF,MAAMyD,UACtBG,YAAauB,KAAKnF,MAAM4D,qBAIvC,EAzCCqB,CAAyBd,EAAAA,WAmD/B,GAAe2B,EAAAA,EAAAA,KACXlB,EAAAA,EAAAA,KARkB,SAACC,GAAD,MAA6C,CAC/D5D,QAAS4D,EAAMC,YAAY7D,QAC3Bb,OAAQyE,EAAMC,YAAY1E,OAC1BkF,iBAAkBT,EAAMkB,KAAKb,OAC7Bc,OAAQnB,EAAMkB,KAAKC,UAMf,CAAER,eAAAA,EAAAA,GAAgBC,UAAAA,EAAAA,GAAW5E,aAAAA,EAAAA,GAAc4C,UAAAA,EAAAA,GAAWG,YAAAA,EAAAA,KAC1DqC,EAAAA,GAJJ,CAKGhB","sources":["webpack://samurai-way/./src/Components/Profile/Profile.module.css?f51d","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://samurai-way/./src/Components/Profile/Profileinfo/ProfileInfo.module.css?bfb8","Components/Profile/Profileinfo/ProfileStatus/ProfileStatusWithHooks.tsx","Components/Profile/Profileinfo/ProfileDataForm.tsx","Components/Profile/Profileinfo/ProfileInfo.tsx","webpack://samurai-way/./src/Components/Profile/MyPosts/MyPosts.module.css?bd90","webpack://samurai-way/./src/Components/Profile/MyPosts/Post/Post.module.css?54ab","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__CAXPx\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__zWuDD\",\"contentImg\":\"ProfileInfo_contentImg__uJJLX\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1V1Mc\",\"mainPhotoWrapper\":\"ProfileInfo_mainPhotoWrapper__uWPC4\",\"mainPhoto\":\"ProfileInfo_mainPhoto__HeemO\",\"contact\":\"ProfileInfo_contact__9c36d\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype StateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: PropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status: </b><span\r\n                    onDoubleClick={activateMode}\r\n                >{props.status}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        autoFocus={true}\r\n                        value={status}\r\n                        onBlur={deactivateEditMode}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { FormControl } from \"../../../Components/common/FormsControls/FormsControls\";\r\nimport { required } from \"../../../utils/validators/Validators\";\r\nimport { ProfileType } from \"../../Profile/Profileinfo/ProfileInfo\";\r\nimport s from './ProfileInfo.module.css';\r\nimport style from '../../common/FormsControls/FormsControls.module.css'\r\nimport { ProfileTypeProps } from \"../../../Components/Profile/Profile\";\r\n\r\nexport type ProfileDataFormValuesType = {\r\n    fullName: string;\r\n    lookingForAJob: boolean;\r\n    lookingForAJobDescription: string;\r\n    aboutMe: string;\r\n};\r\n\r\ntype ProfileProps = {\r\n    profile: ProfileType;\r\n};\r\n\r\ntype ProfileDataFormProps = InjectedFormProps<ProfileDataFormValuesType, ProfileProps> & ProfileProps;\r\n\r\nconst ProfileDataForm: React.FC<ProfileDataFormProps> = ({ handleSubmit, profile, error }) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {error && <div className={style.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n            <div>\r\n                <b>Full name</b>: {\r\n                <Field\r\n                    placeholder={'Full name'}\r\n                    name={'fullName'}\r\n                    component={FormControl}\r\n                    validate={[required]}\r\n                    elementType='input'\r\n                />\r\n            }\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>:\r\n                <Field\r\n                    name={'lookingForAJob'}\r\n                    component={FormControl}\r\n                    validate={[]}\r\n                    type={\"checkbox\"}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <b>My professional skills</b>:\r\n                <Field\r\n                    placeholder={'My professional skills'}\r\n                    name={'lookingForAJobDescription'}\r\n                    component={FormControl}\r\n                    validate={[]}\r\n                    elementType='textarea'\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <b>About me</b>:\r\n                <Field\r\n                    placeholder={'About me'}\r\n                    name={'aboutMe'}\r\n                    component={FormControl}\r\n                    validate={[]}\r\n                    elementType='textarea'\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {profile.contacts && Object.keys(profile.contacts).map(key => {\r\n                return (\r\n\r\n                    <div className={s.contact} key={key}>\r\n                        <b>{key}: <Field\r\n                            placeholder={key}\r\n                            name={\"contacts.\" + key}\r\n                            component={FormControl}\r\n                            validate={[]}\r\n                            elementType='input'\r\n                        /></b>\r\n                    </div>\r\n                );\r\n            })}\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileDataFormValuesType, ProfileProps>({ form: 'edit-profile' })(ProfileDataForm);\r\nexport default ProfileDataFormReduxForm;\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/img/users.jpg\";\r\nimport ProfileStatusWithHooks from \"../../../Components/Profile/Profileinfo/ProfileStatus/ProfileStatusWithHooks\";\r\nimport ProfileDataForm, { ProfileDataFormValuesType } from \"../../Profile/Profileinfo/ProfileDataForm\";\r\nimport { ProfileTypeProps } from \"../../../Components/Profile/Profile\";\r\n\r\ntype Photos = {\r\n    large: string;\r\n    small: string;\r\n}\r\n\r\nexport type ProfileType = {\r\n    photos: Photos;\r\n    userId: number;\r\n    lookingForAJob: boolean;\r\n    lookingForAJobDescription: string;\r\n    fullName: string;\r\n    aboutMe: string;\r\n    contacts: {\r\n        github: string;\r\n        vk: string;\r\n        facebook: string;\r\n        instagram: string;\r\n        twitter: string;\r\n        website: string;\r\n        youtube: string;\r\n        mainLink: string;\r\n    };\r\n};\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null;\r\n    isOwner: boolean;\r\n    status: string;\r\n    updateStatus: (status: string) => void;\r\n    savePhoto: (file: File) => void;\r\n    saveProfile: (profile: ProfileTypeProps) => Promise<void>;\r\n};\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!props.profile) {\r\n        return <Preloader />;\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target && e.target.files && e.target.files.length > 0) {\r\n            const file = e.target.files[0];\r\n            props.savePhoto(file);\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData: ProfileDataFormValuesType) => {\r\n        props.saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div className={s.content}>\r\n                <img src=\"https://proprikol.ru/wp-content/uploads/2020/04/krasivye-kartinki-vysokogo-razresheniya-3.jpg\"\r\n                     alt=\"#\" className={s.contentImg} />\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"\" />\r\n                {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n                {editMode ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit} /> :\r\n                    <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => { setEditMode(true); }} />}\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType;\r\n    isOwner: boolean;\r\n    goToEditMode: () => void;\r\n};\r\n\r\nconst ProfileData = (props: ProfileDataPropsType) => {\r\n    return (\r\n        <div>\r\n            {props.isOwner && <div>\r\n                <button onClick={props.goToEditMode}>edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: {props.profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {props.profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {props.profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {props.profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(props.profile.contacts).map(key => {\r\n                // @ts-ignore\r\n                return <Contact key={key} contactTitle={key} contactValue={props.profile?.contacts[key]} />;\r\n            })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Contact = ({ contactTitle, contactValue }: { contactTitle: string, contactValue: string }) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>;\r\n};\r\n\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"addPostForm\":\"MyPosts_addPostForm__wzF-P\",\"addButton\":\"MyPosts_addButton__kp9Ve\",\"removeButton\":\"MyPosts_removeButton__d1JhJ\",\"myPostsHeader\":\"MyPosts_myPostsHeader__X0KFS\",\"mypostBlock\":\"MyPosts_mypostBlock__-+QMv\",\"posts\":\"MyPosts_posts__+r7SU\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__LJPXq\",\"likeCount\":\"Post_likeCount__3fZ1Y\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PostTypeProps = {\r\n    message: string\r\n    likeCount: number\r\n}\r\nconst Post = (props: PostTypeProps) => {\r\n    return (\r\n                    <div className={s.item}>\r\n                        <img src=\"https://slovnet.ru/wp-content/uploads/2019/01/53-9.jpg\" alt=\"\"/>\r\n                        {props.message}\r\n                        <div><span>{props.likeCount}</span></div>\r\n                    </div>\r\n)\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {MapDispatchPostsType, MapStatePostsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/Validators\";\r\nimport {FormControl} from \"../../../Components/common/FormsControls/FormsControls\";\r\n\r\ntype ProfilePagePostProps = MapStatePostsType & MapDispatchPostsType\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\nlet AddNewPostForm: React.FC<InjectedFormProps<AddPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.addPostForm}>\r\n            <div>\r\n                <Field\r\n                    name='newPostText'\r\n                    component={FormControl}\r\n                    validate={[required, maxLength10]}\r\n                    elementType='textarea'\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={s.addButton}>Add post</button>\r\n            </div>\r\n            <button className={s.removeButton}>Remove</button>\r\n        </form>\r\n    );\r\n};\r\nlet AddNewPostFormRedux = reduxForm<AddPostFormType>({ form: \"ProfileAddNewPostForm\" })(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo((props: ProfilePagePostProps) => {\r\n    let postsElements = props.posts.map((p, index) =>\r\n        <Post\r\n            key={index}\r\n            message={p.message}\r\n            likeCount={p.likesCount} />);\r\n\r\n    let addPost = (values: AddPostFormType) => {\r\n        props.addPostAC?.(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.mypostBlock}>\r\n            <h3 className={s.myPostsHeader}>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={addPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\ntype AddPostFormType = {\r\n    newPostText: string\r\n};\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\n\r\nimport MyPosts from \"./MyPosts\";\r\nimport {AppStateType, DispatchType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPostAC, PostType} from \"../../../redux/profile-reducer\";\r\n\r\n\r\n// const MyPostsContainer = () => {\r\n//\r\n//\r\n//     // let postsElements = props.posts.map(p => <Post message={p.message} likeCount={p.likesCount}/>)\r\n//\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//             (store) => {\r\n//                 const state = store.getState()\r\n//                 let addPost = (newPostText: string) => {\r\n//                     store.dispatch(addPostAC(newPostText))\r\n//                 }\r\n//                 const onPostChange = (newText: string) => {\r\n//                     store.dispatch({type: \"UPDATE-NEW-POST-TEXT\", newText: newText})\r\n//                 }\r\n//\r\n//                 return <MyPosts posts={state.profilePage.posts}\r\n//                                 newPostText={state.profilePage.newPostText}\r\n//                                 addPostAC={addPost}\r\n//                                 updateNewPostText={onPostChange}/>\r\n//             }\r\n//         }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nconst mapStateToProps = (state: AppStateType):MapStatePostsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: DispatchType): MapDispatchPostsType => {\r\n    return {\r\n        addPostAC: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport type MapStatePostsType = {\r\n    posts: PostType[]\r\n    newPostText: string\r\n\r\n\r\n}\r\nexport type MapDispatchPostsType = {\r\n    addPostAC?: (newPostText: string) => void\r\n}\r\n\r\nconst MyPostsContainer\r\n    = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer","import React from \"react\";\r\nimport \"./Profile.module.css\";\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./Profileinfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nexport type ProfileTypeProps = {\r\n    userId?: number;\r\n    lookingForAJob: boolean;\r\n    lookingForAJobDescription: string;\r\n    fullName: string;\r\n    aboutMe: string\r\n    contacts?: {\r\n        github: string;\r\n        vk: string;\r\n        facebook: string;\r\n        instagram: string;\r\n        twitter: string;\r\n        website: string;\r\n        youtube: string;\r\n        mainLink: string;\r\n    };\r\n};\r\n\r\n\r\n\r\nconst Profile = (props: any) => {\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                        saveProfile={props.saveProfile}\r\n            />\r\n\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile, {ProfileTypeProps} from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n// типизация параметров из URL\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n// типизация для получения данных из state\r\ntype MapStatePropsType = {\r\n    profile?: any\r\n    isAuth?: boolean\r\n    status: string\r\n    authorizedUserId: string | null\r\n}\r\n\r\n// типизация для mapDispatchToProps\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: string) => void\r\n    saveProfile: (profile: ProfileTypeProps) => void\r\n}\r\n\r\n// типизация для свойств, которые приходят извне\r\ntype OwnPropsType = {}\r\n\r\n// общий тип пропсов\r\ntype PropsType = RouteComponentProps<PathParamsType> & MapStatePropsType & MapDispatchPropsType & OwnPropsType ;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId && this.props.authorizedUserId!=null) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n    componentDidMount() {\r\n\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId != this.props.match.params.userId ) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(\r\n        mapStateToProps,\r\n        { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n) (ProfileContainer)\r\n"],"names":["_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","Field","placeholder","name","component","FormControl","validate","required","elementType","type","contacts","Object","keys","map","key","s","ProfileData","isOwner","onClick","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","Preloader","src","alt","photos","large","userPhoto","target","files","file","savePhoto","initialValues","formData","saveProfile","then","message","likeCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","React","postsElements","posts","p","index","likesCount","values","addPostAC","newPostText","connect","state","profilePage","dispatch","MyPosts","ProfileContainer","userId","this","match","params","authorizedUserId","history","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter"],"sourceRoot":""}